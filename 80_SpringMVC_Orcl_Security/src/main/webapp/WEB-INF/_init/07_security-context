<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                                 http://www.springframework.org/schema/beans/spring-beans.xsd
                                 http://www.springframework.org/schema/security
                                 http://www.springframework.org/schema/security/spring-security.xsd">

<beans:bean id="bcryptPwdEncoder" 
class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
</beans:beans>

-------80_SpringMVC_Orcl_Security Added --------
1.sql문 추가 : 00_sql 참고

2.web.xml
   <filter>
      <filter-name>springSecurityFilterChain</filter-name>
      <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
   </filter>
   <filter-mapping>
   	<filter-name>springSecurityFilterChain</filter-name>
   	<url-pattern>/*</url-pattern>
   </filter-mapping>

   3.security-context
   <beans:beans xmlns:security="http://www.springframework.org/schema/security"
			 xmlns:context="http://www.springframework.org/schema/context"	
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                                 http://www.springframework.org/schema/beans/spring-beans.xsd
                                 http://www.springframework.org/schema/security
                                 http://www.springframework.org/schema/security/spring-security-4.2.xsd
                                 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
                                 
   4.<beans:bean id="bcryptPwdEncoder" 
class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

<context:component-scan base-package="com.king"></context:component-scan>
<security:http auto-config="true" use-expressions="true">
	<security:session-management>
		<security:concurrency-control max-sessions="1" expired-url="/"/> <!-- 중복로그인 방지 -->
	</security:session-management>
	<security:form-login username-parameter="email" password-parameter="pwd"
	login-processing-url="/member/login" login-page="/member/login" default-target-url="/"/> <!-- 로그인할때 쓰는 폼태그 네임값이 파라미터임 -->
	
</security:http>

5.  servlet-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security-4.2.xsd">
        
    <security:global-method-security pre-post-annotations="enabled"
	secured-annotations="enabled"/>
	
6. MemberController 변경 > @PostMapping("/login") 변경
@PostMapping("/login")
	public String login(RedirectAttributes reAttr, HttpServletRequest req) {
		
		return "redirect:/member/login";
	}
	
7.public class MemberVO implements UserDetails { //이런식으로 변경 참조\

8.security-context.xml
 
<security:authentication-manager> <!-- login-processing-url="/member/login" 이게돌고나서 이게돔 -->
	<security:authentication-provider user-service-ref="authMemberDetailsService"> <!-- 실제인증을 진행할 서비스 객체 -->
		<security:password-encoder ref="bcryptPwdEncoder"/>
	</security:authentication-provider>
</security:authentication-manager>
<beans:bean id="authMemberDetailsService" class="com.king.service.AuthMemberDetailsService"/>

9.
@Inject
	private MemberDAO mdao;
	
	@Override
	public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException { //이걸부르면 db에서 로그인한 아이디를 가져와야됨
		MemberVO mvo = mdao.selectInfo(email);
		if(mvo == null) {
			throw new UsernameNotFoundException(email);
		}
		return mvo;
	}
	
10. /nav.jsp 수정> 참조 , MemberController 로그아웃(getmapping) 주석처리
<%@ taglib uri="http://www.springframework.org/security/tags" prefix="sec" %>
<sec:authorize access="isAuthenticated()">
<sec:authorize access="isAuthenticated()"> <!-- 세션 로그인 성공한 사람만 isAuthenticated() 여기서 true false 값을 리턴함 /인증 이프문느낌-->
		<ul class="nav justify-content-center">
		
			<li class="nav-item">
				<a class="nav-link" href="/product/list">상품리스트</a>
			</li>		
				
			<li class="nav-item">
				<sec:authentication property="principal.auth" var="auth"/> <!-- 벨류값을 불러오는 느낌/ principal.auth 여기서 principal은 현재 접속자 유저의 VO객체 -->
				<c:if test="${auth eq 'ADM' }">
						<a class="nav-link" href="/member/list"><sec:authentication property="principal.nickname"/>
						 (<sec:authentication property="principal.email"/>)</a>
				</c:if>
				<c:if test="${auth eq 'MEM' }">
						<a class="nav-link" href='/member/modify?em=<sec:authentication property="principal.email"/>'>
						<sec:authentication property="principal.nickname"/>
						 (<sec:authentication property="principal.email"/>)</a>
				</c:if>
			</li>
			<li class="nav-item">
				<a class="nav-link" href='<c:url value="/member/logout"/>' id="logout">로그아웃</a>
			</li>
		</ul>
		<form action='<c:url value="/member/logout"/>' id="logoutForm" method="post">
			<input type="hidden" name="${_csrf.parameterName }" value="${_csrf.token }"> <!-- 포스트로 보내서 시큐리티가 작동하게함 -->
		</form>
		<script>
			$(function() {
				$("#logout").on("click", function(e) {
					e.preventDefault();//a링크니깐 이동안하게 막기
					$("#logoutForm").submit();
				});
			});
		</script>
</sec:authorize>
<sec:authorize access="isAnonymous()"> <!-- 세션없는 아무나 -->

11.security-context에 logout 설정
<security:logout logout-url="/member/logout" invalidate-session="true"
	logout-success-url="/"/>
	
12.
<security:form-login
authentication-failure-handler-ref="loginFailureHandler"

<beans:bean id="loginFailureHandler" class="com.king.security.LoginFailureHandler">
	<beans:property name="authEmail" value="email"/> <!-- 로그인.jsp의 정보를 주고 받는 통로 프로퍼티를 맞춰줘야됨, 핸들러가 authEmail을 주고 여기 email을 login.jsp로줌 -->
	<beans:property name="authPwd" value="pwd"/>
	<beans:property name="errMsg" value="err_msg"/>
	<beans:property name="failUrl" value="/member/login?error"/>
</beans:bean>

13.
public class LoginFailureHandler implements AuthenticationFailureHandler {

14.
private void loginFailCountUp(String email) {
		msv.upFailCount(email);
		int fc = msv.getFC(email);
		if(fc >= 5) {
			msv.lockEmail(email);
		}
	}

15. service , dao, mapper 수정 및 추가

16. 컨트롤러 수정
@PostMapping("/login") //AuthMemberDetailsService/  끝나고 일로옴
	public String login(RedirectAttributes reAttr, HttpServletRequest req) { //authMemberDetailService 끝내고 일로옴
		reAttr.addFlashAttribute("email", req.getAttribute("email"));
		reAttr.addFlashAttribute("err_msg", req.getAttribute("err_msg"));
		if (req.getAttribute("err_msg") != null) {
			return "redirect:"+ req.getAttribute("failUrl").toString();
		}
		return "redirect:/member/login";
	}


17.security-context
authentication-success-handler-ref="loginSuccessHandler"/>
<beans:bean id="loginSuccessHandler" class="com.king.security.LoginSuccessHandler">
	<beans:property name="authEmail" value="email"/>
	<beans:property name="authUrl" value="/"/>
</beans:bean>

18.public class LoginSuccessHandler implements AuthenticationSuccessHandler {

msv.resetFC(email); >> 서비스 다오 맵퍼 수정 및 추가
HttpSession ses = request.getSession(false);//기존의 세션값을 사용하겠다는 뜻
		if(ses == null) {
			return;
		}else {
			ses.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION); //세션 로그인시 발생한 에러 삭제
			
		}
		SavedRequest savedReq = reqCache.getRequest(request, response);
		if (savedReq != null) {
			//어느 서비스를 이용하기 위해서 리퀘스트 요청이 있었어! ex)/product/register
			String destPage = savedReq.getRedirectUrl();//기존 url값을 저장해서 뽑아내서 스트링이 된것
			reStg.sendRedirect(request, response, destPage);
		} else {
			//여긴 직접 로그인
			reStg.sendRedirect(request, response, authUrl);
		}


19. 각 컨트롤러의 메서드 접근 설정
@PreAuthorize("isAuthenticated()")
@GetMapping("/register")
/* @Secured("ADM"), @PreAuthorize("hasRole('ADM')") */ 이것도 가능

#두개이상의 권한 허용
@Secured({"ADM","MEM"}) or  @PreAuthorize("hasAnyRole('ADM','MEM')"

20. 모든 jsp에 form 태그 > post 전송은 
<input type="hidden" name="${_csrf.parameterName }" value="${_csrf.token }"> 추가

21. common/header.jsp
<meta name="_csrf_header" content="${_csrf.headerName }">
<meta name="_csrf" content="${_csrf.token }">

22. 모든 ajax post, put, patch, delete 전송은
let header = $("meta[name='_csrf_header']").attr("content");
let token = $("meta[name='_csrf']").attr("content");

 - ajax 메서드 내부 추가
beforeSend: function(xhr) {
            xhr.setRequestHeader(header, token);
         }   

23. remember -me part








